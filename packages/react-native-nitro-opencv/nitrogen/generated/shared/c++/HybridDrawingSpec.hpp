///
/// HybridDrawingSpec.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#if __has_include(<NitroModules/HybridObject.hpp>)
#include <NitroModules/HybridObject.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif

// Forward declaration of `HybridCvMatSpec` to properly resolve imports.
namespace margelo::nitro::nitroopencv { class HybridCvMatSpec; }
// Forward declaration of `HybridCvPointSpec` to properly resolve imports.
namespace margelo::nitro::nitroopencv { class HybridCvPointSpec; }
// Forward declaration of `HybridCvScalarSpec` to properly resolve imports.
namespace margelo::nitro::nitroopencv { class HybridCvScalarSpec; }
// Forward declaration of `LineTypes` to properly resolve imports.
namespace margelo::nitro::nitroopencv { enum class LineTypes; }
// Forward declaration of `HybridCvSizeSpec` to properly resolve imports.
namespace margelo::nitro::nitroopencv { class HybridCvSizeSpec; }
// Forward declaration of `HybridMatVectorSpec` to properly resolve imports.
namespace margelo::nitro::nitroopencv { class HybridMatVectorSpec; }
// Forward declaration of `MarkerTypes` to properly resolve imports.
namespace margelo::nitro::nitroopencv { enum class MarkerTypes; }

#include <memory>
#include "HybridCvMatSpec.hpp"
#include "HybridCvPointSpec.hpp"
#include "HybridCvScalarSpec.hpp"
#include "LineTypes.hpp"
#include "HybridCvSizeSpec.hpp"
#include "HybridMatVectorSpec.hpp"
#include "MarkerTypes.hpp"

namespace margelo::nitro::nitroopencv {

  using namespace margelo::nitro;

  /**
   * An abstract base class for `Drawing`
   * Inherit this class to create instances of `HybridDrawingSpec` in C++.
   * You must explicitly call `HybridObject`'s constructor yourself, because it is virtual.
   * @example
   * ```cpp
   * class HybridDrawing: public HybridDrawingSpec {
   * public:
   *   HybridDrawing(...): HybridObject(TAG) { ... }
   *   // ...
   * };
   * ```
   */
  class HybridDrawingSpec: public virtual HybridObject {
    public:
      // Constructor
      explicit HybridDrawingSpec(): HybridObject(TAG) { }

      // Destructor
      ~HybridDrawingSpec() override = default;

    public:
      // Properties
      

    public:
      // Methods
      virtual void arrowedLine(const std::shared_ptr<margelo::nitro::nitroopencv::HybridCvMatSpec>& img, const std::shared_ptr<margelo::nitro::nitroopencv::HybridCvPointSpec>& pt1, const std::shared_ptr<margelo::nitro::nitroopencv::HybridCvPointSpec>& pt2, const std::shared_ptr<margelo::nitro::nitroopencv::HybridCvScalarSpec>& color, double thickness, LineTypes line_type) = 0;
      virtual void circle(const std::shared_ptr<margelo::nitro::nitroopencv::HybridCvMatSpec>& img, const std::shared_ptr<margelo::nitro::nitroopencv::HybridCvPointSpec>& center, double radius, const std::shared_ptr<margelo::nitro::nitroopencv::HybridCvScalarSpec>& color, double thickness, LineTypes line_type) = 0;
      virtual bool clipLine(const std::shared_ptr<margelo::nitro::nitroopencv::HybridCvSizeSpec>& imgSize, const std::shared_ptr<margelo::nitro::nitroopencv::HybridCvPointSpec>& pt1, const std::shared_ptr<margelo::nitro::nitroopencv::HybridCvPointSpec>& pt2) = 0;
      virtual void drawContours(const std::shared_ptr<margelo::nitro::nitroopencv::HybridCvMatSpec>& image, const std::shared_ptr<margelo::nitro::nitroopencv::HybridMatVectorSpec>& contours, double contourIdx, const std::shared_ptr<margelo::nitro::nitroopencv::HybridCvScalarSpec>& color, double thickness, LineTypes lineType) = 0;
      virtual void drawMarker(const std::shared_ptr<margelo::nitro::nitroopencv::HybridCvMatSpec>& img, const std::shared_ptr<margelo::nitro::nitroopencv::HybridCvPointSpec>& position, const std::shared_ptr<margelo::nitro::nitroopencv::HybridCvScalarSpec>& color, MarkerTypes markerType, double markerSize, double thickness, LineTypes line_type) = 0;
      virtual void ellipse(const std::shared_ptr<margelo::nitro::nitroopencv::HybridCvMatSpec>& img, const std::shared_ptr<margelo::nitro::nitroopencv::HybridCvPointSpec>& center, const std::shared_ptr<margelo::nitro::nitroopencv::HybridCvSizeSpec>& axes, double angle, double startAngle, double endAngle, const std::shared_ptr<margelo::nitro::nitroopencv::HybridCvScalarSpec>& color, double thickness, LineTypes lineType) = 0;
      virtual void fillConvexPoly(const std::shared_ptr<margelo::nitro::nitroopencv::HybridCvMatSpec>& img, const std::shared_ptr<margelo::nitro::nitroopencv::HybridMatVectorSpec>& pts, const std::shared_ptr<margelo::nitro::nitroopencv::HybridCvScalarSpec>& color, LineTypes lineType) = 0;
      virtual void fillPoly(const std::shared_ptr<margelo::nitro::nitroopencv::HybridCvMatSpec>& img, const std::shared_ptr<margelo::nitro::nitroopencv::HybridMatVectorSpec>& pts, const std::shared_ptr<margelo::nitro::nitroopencv::HybridCvScalarSpec>& color, LineTypes lineType) = 0;
      virtual void line(const std::shared_ptr<margelo::nitro::nitroopencv::HybridCvMatSpec>& img, const std::shared_ptr<margelo::nitro::nitroopencv::HybridCvPointSpec>& pt1, const std::shared_ptr<margelo::nitro::nitroopencv::HybridCvPointSpec>& pt2, const std::shared_ptr<margelo::nitro::nitroopencv::HybridCvScalarSpec>& color, double thickness, LineTypes lineType) = 0;
      virtual void polylines(const std::shared_ptr<margelo::nitro::nitroopencv::HybridCvMatSpec>& img, const std::shared_ptr<margelo::nitro::nitroopencv::HybridMatVectorSpec>& pts, bool isClosed, const std::shared_ptr<margelo::nitro::nitroopencv::HybridCvScalarSpec>& color, double thickness, LineTypes lineType) = 0;
      virtual void rectangle(const std::shared_ptr<margelo::nitro::nitroopencv::HybridCvMatSpec>& img, const std::shared_ptr<margelo::nitro::nitroopencv::HybridCvPointSpec>& pt1, const std::shared_ptr<margelo::nitro::nitroopencv::HybridCvPointSpec>& pt2, const std::shared_ptr<margelo::nitro::nitroopencv::HybridCvScalarSpec>& color, double thickness, LineTypes lineType) = 0;

    protected:
      // Hybrid Setup
      void loadHybridMethods() override;

    protected:
      // Tag for logging
      static constexpr auto TAG = "Drawing";
  };

} // namespace margelo::nitro::nitroopencv

///
/// ImwriteFlags.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#include <cmath>
#if __has_include(<NitroModules/JSIConverter.hpp>)
#include <NitroModules/JSIConverter.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif
#if __has_include(<NitroModules/NitroDefines.hpp>)
#include <NitroModules/NitroDefines.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif

namespace margelo::nitro::nitroopencv {

  /**
   * An enum which can be represented as a JavaScript enum (ImwriteFlags).
   */
  enum class ImwriteFlags {
    IMWRITE_JPEG_QUALITY      SWIFT_NAME(imwriteJpegQuality) = 1,
    IMWRITE_JPEG_PROGRESSIVE      SWIFT_NAME(imwriteJpegProgressive) = 2,
    IMWRITE_JPEG_OPTIMIZE      SWIFT_NAME(imwriteJpegOptimize) = 3,
    IMWRITE_JPEG_RST_INTERVAL      SWIFT_NAME(imwriteJpegRstInterval) = 4,
    IMWRITE_JPEG_LUMA_QUALITY      SWIFT_NAME(imwriteJpegLumaQuality) = 5,
    IMWRITE_JPEG_CHROMA_QUALITY      SWIFT_NAME(imwriteJpegChromaQuality) = 6,
    IMWRITE_JPEG_SAMPLING_FACTOR      SWIFT_NAME(imwriteJpegSamplingFactor) = 7,
    IMWRITE_PNG_COMPRESSION      SWIFT_NAME(imwritePngCompression) = 16,
    IMWRITE_PNG_STRATEGY      SWIFT_NAME(imwritePngStrategy) = 17,
    IMWRITE_PNG_BILEVEL      SWIFT_NAME(imwritePngBilevel) = 18,
    IMWRITE_PXM_BINARY      SWIFT_NAME(imwritePxmBinary) = 32,
    IMWRITE_EXR_TYPE      SWIFT_NAME(imwriteExrType) = 48,
    IMWRITE_EXR_COMPRESSION      SWIFT_NAME(imwriteExrCompression) = 49,
    IMWRITE_EXR_DWA_COMPRESSION_LEVEL      SWIFT_NAME(imwriteExrDwaCompressionLevel) = 50,
    IMWRITE_WEBP_QUALITY      SWIFT_NAME(imwriteWebpQuality) = 64,
    IMWRITE_HDR_COMPRESSION      SWIFT_NAME(imwriteHdrCompression) = 80,
    IMWRITE_PAM_TUPLETYPE      SWIFT_NAME(imwritePamTupletype) = 128,
    IMWRITE_TIFF_RESUNIT      SWIFT_NAME(imwriteTiffResunit) = 256,
    IMWRITE_TIFF_XDPI      SWIFT_NAME(imwriteTiffXdpi) = 257,
    IMWRITE_TIFF_YDPI      SWIFT_NAME(imwriteTiffYdpi) = 258,
    IMWRITE_TIFF_COMPRESSION      SWIFT_NAME(imwriteTiffCompression) = 259,
    IMWRITE_TIFF_ROWSPERSTRIP      SWIFT_NAME(imwriteTiffRowsperstrip) = 278,
    IMWRITE_TIFF_PREDICTOR      SWIFT_NAME(imwriteTiffPredictor) = 317,
    IMWRITE_JPEG2000_COMPRESSION_X1000      SWIFT_NAME(imwriteJpeg2000CompressionX1000) = 272,
    IMWRITE_AVIF_QUALITY      SWIFT_NAME(imwriteAvifQuality) = 512,
    IMWRITE_AVIF_DEPTH      SWIFT_NAME(imwriteAvifDepth) = 513,
    IMWRITE_AVIF_SPEED      SWIFT_NAME(imwriteAvifSpeed) = 514,
    IMWRITE_JPEGXL_QUALITY      SWIFT_NAME(imwriteJpegxlQuality) = 640,
    IMWRITE_JPEGXL_EFFORT      SWIFT_NAME(imwriteJpegxlEffort) = 641,
    IMWRITE_JPEGXL_DISTANCE      SWIFT_NAME(imwriteJpegxlDistance) = 642,
    IMWRITE_JPEGXL_DECODING_SPEED      SWIFT_NAME(imwriteJpegxlDecodingSpeed) = 643,
    IMWRITE_GIF_LOOP      SWIFT_NAME(imwriteGifLoop) = 1024,
    IMWRITE_GIF_SPEED      SWIFT_NAME(imwriteGifSpeed) = 1025,
    IMWRITE_GIF_QUALITY      SWIFT_NAME(imwriteGifQuality) = 1026,
    IMWRITE_GIF_DITHER      SWIFT_NAME(imwriteGifDither) = 1027,
    IMWRITE_GIF_TRANSPARENCY      SWIFT_NAME(imwriteGifTransparency) = 1028,
    IMWRITE_GIF_COLORTABLE      SWIFT_NAME(imwriteGifColortable) = 1029,
  } CLOSED_ENUM;

} // namespace margelo::nitro::nitroopencv

namespace margelo::nitro {

  using namespace margelo::nitro::nitroopencv;

  // C++ ImwriteFlags <> JS ImwriteFlags (enum)
  template <>
  struct JSIConverter<ImwriteFlags> final {
    static inline ImwriteFlags fromJSI(jsi::Runtime& runtime, const jsi::Value& arg) {
      int enumValue = JSIConverter<int>::fromJSI(runtime, arg);
      return static_cast<ImwriteFlags>(enumValue);
    }
    static inline jsi::Value toJSI(jsi::Runtime& runtime, ImwriteFlags arg) {
      int enumValue = static_cast<int>(arg);
      return JSIConverter<int>::toJSI(runtime, enumValue);
    }
    static inline bool canConvert(jsi::Runtime&, const jsi::Value& value) {
      if (!value.isNumber()) {
        return false;
      }
      double integer;
      double fraction = modf(value.getNumber(), &integer);
      if (fraction != 0.0) {
        // It is some kind of floating point number - our enums are ints.
        return false;
      }
      // Check if we are within the bounds of the enum.
      return integer >= 0 && integer <= 36;
    }
  };

} // namespace margelo::nitro

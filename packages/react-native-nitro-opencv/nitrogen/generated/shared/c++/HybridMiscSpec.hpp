///
/// HybridMiscSpec.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#if __has_include(<NitroModules/HybridObject.hpp>)
#include <NitroModules/HybridObject.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif

// Forward declaration of `HybridCvMatSpec` to properly resolve imports.
namespace margelo::nitro::nitroopencv { class HybridCvMatSpec; }
// Forward declaration of `AdaptiveThresholdTypes` to properly resolve imports.
namespace margelo::nitro::nitroopencv { enum class AdaptiveThresholdTypes; }
// Forward declaration of `ThresholdTypes` to properly resolve imports.
namespace margelo::nitro::nitroopencv { enum class ThresholdTypes; }
// Forward declaration of `DistanceTypes` to properly resolve imports.
namespace margelo::nitro::nitroopencv { enum class DistanceTypes; }
// Forward declaration of `DistanceTransformMasks` to properly resolve imports.
namespace margelo::nitro::nitroopencv { enum class DistanceTransformMasks; }
// Forward declaration of `HybridCvPointSpec` to properly resolve imports.
namespace margelo::nitro::nitroopencv { class HybridCvPointSpec; }
// Forward declaration of `HybridCvScalarSpec` to properly resolve imports.
namespace margelo::nitro::nitroopencv { class HybridCvScalarSpec; }
// Forward declaration of `HybridCvRectSpec` to properly resolve imports.
namespace margelo::nitro::nitroopencv { class HybridCvRectSpec; }

#include <memory>
#include "HybridCvMatSpec.hpp"
#include "AdaptiveThresholdTypes.hpp"
#include "ThresholdTypes.hpp"
#include "DistanceTypes.hpp"
#include "DistanceTransformMasks.hpp"
#include "HybridCvPointSpec.hpp"
#include "HybridCvScalarSpec.hpp"
#include <optional>
#include "HybridCvRectSpec.hpp"

namespace margelo::nitro::nitroopencv {

  using namespace margelo::nitro;

  /**
   * An abstract base class for `Misc`
   * Inherit this class to create instances of `HybridMiscSpec` in C++.
   * You must explicitly call `HybridObject`'s constructor yourself, because it is virtual.
   * @example
   * ```cpp
   * class HybridMisc: public HybridMiscSpec {
   * public:
   *   HybridMisc(...): HybridObject(TAG) { ... }
   *   // ...
   * };
   * ```
   */
  class HybridMiscSpec: public virtual HybridObject {
    public:
      // Constructor
      explicit HybridMiscSpec(): HybridObject(TAG) { }

      // Destructor
      ~HybridMiscSpec() override = default;

    public:
      // Properties
      

    public:
      // Methods
      virtual void adaptiveThreshold(const std::shared_ptr<margelo::nitro::nitroopencv::HybridCvMatSpec>& src, const std::shared_ptr<margelo::nitro::nitroopencv::HybridCvMatSpec>& dst, double maxValue, AdaptiveThresholdTypes adaptiveMethod, ThresholdTypes thresholdType, double blockSize, double C) = 0;
      virtual void distanceTransform(const std::shared_ptr<margelo::nitro::nitroopencv::HybridCvMatSpec>& src, const std::shared_ptr<margelo::nitro::nitroopencv::HybridCvMatSpec>& dst, DistanceTypes distanceType, DistanceTransformMasks maskSize) = 0;
      virtual double floodFill(const std::shared_ptr<margelo::nitro::nitroopencv::HybridCvMatSpec>& image, const std::shared_ptr<margelo::nitro::nitroopencv::HybridCvMatSpec>& mask, const std::shared_ptr<margelo::nitro::nitroopencv::HybridCvPointSpec>& seedPoint, const std::shared_ptr<margelo::nitro::nitroopencv::HybridCvScalarSpec>& newVal, const std::optional<std::shared_ptr<margelo::nitro::nitroopencv::HybridCvRectSpec>>& rect, const std::shared_ptr<margelo::nitro::nitroopencv::HybridCvScalarSpec>& loDiff, const std::shared_ptr<margelo::nitro::nitroopencv::HybridCvScalarSpec>& upDiff, double flags) = 0;
      virtual void integral(const std::shared_ptr<margelo::nitro::nitroopencv::HybridCvMatSpec>& src, const std::shared_ptr<margelo::nitro::nitroopencv::HybridCvMatSpec>& sum) = 0;
      virtual void threshold(const std::shared_ptr<margelo::nitro::nitroopencv::HybridCvMatSpec>& src, const std::shared_ptr<margelo::nitro::nitroopencv::HybridCvMatSpec>& dst, double thresh, double maxval, double type) = 0;

    protected:
      // Hybrid Setup
      void loadHybridMethods() override;

    protected:
      // Tag for logging
      static constexpr auto TAG = "Misc";
  };

} // namespace margelo::nitro::nitroopencv

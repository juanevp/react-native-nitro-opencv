///
/// ImreadModes.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#include <cmath>
#if __has_include(<NitroModules/JSIConverter.hpp>)
#include <NitroModules/JSIConverter.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif
#if __has_include(<NitroModules/NitroDefines.hpp>)
#include <NitroModules/NitroDefines.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif

namespace margelo::nitro::nitroopencv {

  /**
   * An enum which can be represented as a JavaScript enum (ImreadModes).
   */
  enum class ImreadModes {
    IMREAD_UNCHANGED      SWIFT_NAME(imreadUnchanged) = -1,
    IMREAD_GRAYSCALE      SWIFT_NAME(imreadGrayscale) = 0,
    IMREAD_COLOR_BGR      SWIFT_NAME(imreadColorBgr) = 1,
    IMREAD_COLOR      SWIFT_NAME(imreadColor) = 1,
    IMREAD_ANYDEPTH      SWIFT_NAME(imreadAnydepth) = 2,
    IMREAD_ANYCOLOR      SWIFT_NAME(imreadAnycolor) = 4,
    IMREAD_LOAD_GDAL      SWIFT_NAME(imreadLoadGdal) = 8,
    IMREAD_REDUCED_GRAYSCALE_2      SWIFT_NAME(imreadReducedGrayscale2) = 16,
    IMREAD_REDUCED_COLOR_2      SWIFT_NAME(imreadReducedColor2) = 17,
    IMREAD_REDUCED_GRAYSCALE_4      SWIFT_NAME(imreadReducedGrayscale4) = 32,
    IMREAD_REDUCED_COLOR_4      SWIFT_NAME(imreadReducedColor4) = 33,
    IMREAD_REDUCED_GRAYSCALE_8      SWIFT_NAME(imreadReducedGrayscale8) = 64,
    IMREAD_REDUCED_COLOR_8      SWIFT_NAME(imreadReducedColor8) = 65,
    IMREAD_IGNORE_ORIENTATION      SWIFT_NAME(imreadIgnoreOrientation) = 128,
    IMREAD_COLOR_RGB      SWIFT_NAME(imreadColorRgb) = 256,
  } CLOSED_ENUM;

} // namespace margelo::nitro::nitroopencv

namespace margelo::nitro {

  using namespace margelo::nitro::nitroopencv;

  // C++ ImreadModes <> JS ImreadModes (enum)
  template <>
  struct JSIConverter<ImreadModes> final {
    static inline ImreadModes fromJSI(jsi::Runtime& runtime, const jsi::Value& arg) {
      int enumValue = JSIConverter<int>::fromJSI(runtime, arg);
      return static_cast<ImreadModes>(enumValue);
    }
    static inline jsi::Value toJSI(jsi::Runtime& runtime, ImreadModes arg) {
      int enumValue = static_cast<int>(arg);
      return JSIConverter<int>::toJSI(runtime, enumValue);
    }
    static inline bool canConvert(jsi::Runtime&, const jsi::Value& value) {
      if (!value.isNumber()) {
        return false;
      }
      double integer;
      double fraction = modf(value.getNumber(), &integer);
      if (fraction != 0.0) {
        // It is some kind of floating point number - our enums are ints.
        return false;
      }
      // Check if we are within the bounds of the enum.
      return integer >= 0 && integer <= 14;
    }
  };

} // namespace margelo::nitro

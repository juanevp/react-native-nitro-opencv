///
/// HybridImageTransformSpec.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#if __has_include(<NitroModules/HybridObject.hpp>)
#include <NitroModules/HybridObject.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif

// Forward declaration of `HybridCvMatSpec` to properly resolve imports.
namespace margelo::nitro::nitroopencv { class HybridCvMatSpec; }
// Forward declaration of `HybridPointVectorSpec` to properly resolve imports.
namespace margelo::nitro::nitroopencv { class HybridPointVectorSpec; }
// Forward declaration of `DecompTypes` to properly resolve imports.
namespace margelo::nitro::nitroopencv { enum class DecompTypes; }
// Forward declaration of `HybridCvSizeSpec` to properly resolve imports.
namespace margelo::nitro::nitroopencv { class HybridCvSizeSpec; }
// Forward declaration of `InterpolationFlags` to properly resolve imports.
namespace margelo::nitro::nitroopencv { enum class InterpolationFlags; }
// Forward declaration of `BorderTypes` to properly resolve imports.
namespace margelo::nitro::nitroopencv { enum class BorderTypes; }
// Forward declaration of `HybridCvScalarSpec` to properly resolve imports.
namespace margelo::nitro::nitroopencv { class HybridCvScalarSpec; }

#include <memory>
#include "HybridCvMatSpec.hpp"
#include "HybridPointVectorSpec.hpp"
#include "DecompTypes.hpp"
#include "HybridCvSizeSpec.hpp"
#include <optional>
#include "InterpolationFlags.hpp"
#include "BorderTypes.hpp"
#include "HybridCvScalarSpec.hpp"

namespace margelo::nitro::nitroopencv {

  using namespace margelo::nitro;

  /**
   * An abstract base class for `ImageTransform`
   * Inherit this class to create instances of `HybridImageTransformSpec` in C++.
   * You must explicitly call `HybridObject`'s constructor yourself, because it is virtual.
   * @example
   * ```cpp
   * class HybridImageTransform: public HybridImageTransformSpec {
   * public:
   *   HybridImageTransform(...): HybridObject(TAG) { ... }
   *   // ...
   * };
   * ```
   */
  class HybridImageTransformSpec: public virtual HybridObject {
    public:
      // Constructor
      explicit HybridImageTransformSpec(): HybridObject(TAG) { }

      // Destructor
      ~HybridImageTransformSpec() override = default;

    public:
      // Properties
      

    public:
      // Methods
      virtual std::shared_ptr<margelo::nitro::nitroopencv::HybridCvMatSpec> getPerspectiveTransform(const std::shared_ptr<margelo::nitro::nitroopencv::HybridPointVectorSpec>& src, const std::shared_ptr<margelo::nitro::nitroopencv::HybridPointVectorSpec>& dst, DecompTypes solveMethod) = 0;
      virtual void resize(const std::shared_ptr<margelo::nitro::nitroopencv::HybridCvMatSpec>& src, const std::shared_ptr<margelo::nitro::nitroopencv::HybridCvMatSpec>& dst, const std::shared_ptr<margelo::nitro::nitroopencv::HybridCvSizeSpec>& dsize, std::optional<double> fx, std::optional<double> fy, std::optional<InterpolationFlags> flags) = 0;
      virtual void resizeTo(const std::shared_ptr<margelo::nitro::nitroopencv::HybridCvMatSpec>& src, const std::shared_ptr<margelo::nitro::nitroopencv::HybridCvMatSpec>& dst, double width, double height, std::optional<InterpolationFlags> flags) = 0;
      virtual void resizeByScale(const std::shared_ptr<margelo::nitro::nitroopencv::HybridCvMatSpec>& src, const std::shared_ptr<margelo::nitro::nitroopencv::HybridCvMatSpec>& dst, double fx, double fy, std::optional<InterpolationFlags> flags) = 0;
      virtual void warpAffine(const std::shared_ptr<margelo::nitro::nitroopencv::HybridCvMatSpec>& src, const std::shared_ptr<margelo::nitro::nitroopencv::HybridCvMatSpec>& dst, const std::shared_ptr<margelo::nitro::nitroopencv::HybridCvMatSpec>& M, const std::shared_ptr<margelo::nitro::nitroopencv::HybridCvSizeSpec>& dsize) = 0;
      virtual void warpPerspective(const std::shared_ptr<margelo::nitro::nitroopencv::HybridCvMatSpec>& src, const std::shared_ptr<margelo::nitro::nitroopencv::HybridCvMatSpec>& dst, const std::shared_ptr<margelo::nitro::nitroopencv::HybridCvMatSpec>& M, const std::shared_ptr<margelo::nitro::nitroopencv::HybridCvSizeSpec>& size, InterpolationFlags flags, BorderTypes borderMode, const std::shared_ptr<margelo::nitro::nitroopencv::HybridCvScalarSpec>& borderValue) = 0;

    protected:
      // Hybrid Setup
      void loadHybridMethods() override;

    protected:
      // Tag for logging
      static constexpr auto TAG = "ImageTransform";
  };

} // namespace margelo::nitro::nitroopencv

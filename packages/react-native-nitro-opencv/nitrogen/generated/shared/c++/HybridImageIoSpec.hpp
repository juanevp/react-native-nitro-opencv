///
/// HybridImageIoSpec.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#if __has_include(<NitroModules/HybridObject.hpp>)
#include <NitroModules/HybridObject.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif

// Forward declaration of `ImreadModes` to properly resolve imports.
namespace margelo::nitro::nitroopencv { enum class ImreadModes; }
// Forward declaration of `HybridCvMatSpec` to properly resolve imports.
namespace margelo::nitro::nitroopencv { class HybridCvMatSpec; }
// Forward declaration of `HybridMatVectorSpec` to properly resolve imports.
namespace margelo::nitro::nitroopencv { class HybridMatVectorSpec; }
// Forward declaration of `HybridCvRangeSpec` to properly resolve imports.
namespace margelo::nitro::nitroopencv { class HybridCvRangeSpec; }
// Forward declaration of `ArrayBuffer` to properly resolve imports.
namespace NitroModules { class ArrayBuffer; }
// Forward declaration of `ImwriteFlags` to properly resolve imports.
namespace margelo::nitro::nitroopencv { enum class ImwriteFlags; }

#include <string>
#include <optional>
#include "ImreadModes.hpp"
#include <memory>
#include "HybridCvMatSpec.hpp"
#include "HybridMatVectorSpec.hpp"
#include "HybridCvRangeSpec.hpp"
#include <NitroModules/ArrayBuffer.hpp>
#include <vector>
#include <tuple>
#include "ImwriteFlags.hpp"

namespace margelo::nitro::nitroopencv {

  using namespace margelo::nitro;

  /**
   * An abstract base class for `ImageIo`
   * Inherit this class to create instances of `HybridImageIoSpec` in C++.
   * You must explicitly call `HybridObject`'s constructor yourself, because it is virtual.
   * @example
   * ```cpp
   * class HybridImageIo: public HybridImageIoSpec {
   * public:
   *   HybridImageIo(...): HybridObject(TAG) { ... }
   *   // ...
   * };
   * ```
   */
  class HybridImageIoSpec: public virtual HybridObject {
    public:
      // Constructor
      explicit HybridImageIoSpec(): HybridObject(TAG) { }

      // Destructor
      ~HybridImageIoSpec() override = default;

    public:
      // Properties
      

    public:
      // Methods
      virtual bool haveImageReader(const std::string& filename) = 0;
      virtual bool haveImageWriter(const std::string& filename) = 0;
      virtual double imcount(const std::string& filename, std::optional<ImreadModes> flags) = 0;
      virtual std::shared_ptr<margelo::nitro::nitroopencv::HybridCvMatSpec> imdecode(const std::shared_ptr<margelo::nitro::nitroopencv::HybridCvMatSpec>& buf, ImreadModes flags, const std::optional<std::shared_ptr<margelo::nitro::nitroopencv::HybridCvMatSpec>>& dst) = 0;
      virtual bool imdecodemulti(const std::shared_ptr<margelo::nitro::nitroopencv::HybridCvMatSpec>& buf, ImreadModes flags, const std::shared_ptr<margelo::nitro::nitroopencv::HybridMatVectorSpec>& mats, const std::optional<std::shared_ptr<margelo::nitro::nitroopencv::HybridCvRangeSpec>>& range) = 0;
      virtual std::optional<std::shared_ptr<ArrayBuffer>> imencode(const std::string& ext, const std::shared_ptr<margelo::nitro::nitroopencv::HybridCvMatSpec>& img, const std::optional<std::vector<std::tuple<ImwriteFlags, double>>>& params) = 0;
      virtual std::optional<std::shared_ptr<ArrayBuffer>> imencodemulti(const std::string& ext, const std::shared_ptr<margelo::nitro::nitroopencv::HybridMatVectorSpec>& imgs, const std::optional<std::vector<std::tuple<ImwriteFlags, double>>>& params) = 0;
      virtual std::shared_ptr<margelo::nitro::nitroopencv::HybridCvMatSpec> imread(const std::string& filename, std::optional<ImreadModes> flags, const std::optional<std::shared_ptr<margelo::nitro::nitroopencv::HybridCvMatSpec>>& dst) = 0;
      virtual bool imreadmulti(const std::string& filename, const std::shared_ptr<margelo::nitro::nitroopencv::HybridMatVectorSpec>& mats, std::optional<ImreadModes> flags) = 0;
      virtual bool imwrite(const std::string& filename, const std::shared_ptr<margelo::nitro::nitroopencv::HybridCvMatSpec>& img, const std::optional<std::vector<std::tuple<ImwriteFlags, double>>>& params) = 0;
      virtual bool imwritemulti(const std::string& filename, const std::shared_ptr<margelo::nitro::nitroopencv::HybridMatVectorSpec>& img, const std::optional<std::vector<std::tuple<ImwriteFlags, double>>>& params) = 0;

    protected:
      // Hybrid Setup
      void loadHybridMethods() override;

    protected:
      // Tag for logging
      static constexpr auto TAG = "ImageIo";
  };

} // namespace margelo::nitro::nitroopencv

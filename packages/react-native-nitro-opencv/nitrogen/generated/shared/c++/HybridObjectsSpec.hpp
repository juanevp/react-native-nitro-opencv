///
/// HybridObjectsSpec.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#if __has_include(<NitroModules/HybridObject.hpp>)
#include <NitroModules/HybridObject.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif

// Forward declaration of `HybridCvMatSpec` to properly resolve imports.
namespace margelo::nitro::nitroopencv { class HybridCvMatSpec; }
// Forward declaration of `DataTypes` to properly resolve imports.
namespace margelo::nitro::nitroopencv { enum class DataTypes; }
// Forward declaration of `HybridMatVectorSpec` to properly resolve imports.
namespace margelo::nitro::nitroopencv { class HybridMatVectorSpec; }
// Forward declaration of `HybridCvPointSpec` to properly resolve imports.
namespace margelo::nitro::nitroopencv { class HybridCvPointSpec; }
// Forward declaration of `HybridPointVectorSpec` to properly resolve imports.
namespace margelo::nitro::nitroopencv { class HybridPointVectorSpec; }
// Forward declaration of `HybridPointVectorOfVectorsSpec` to properly resolve imports.
namespace margelo::nitro::nitroopencv { class HybridPointVectorOfVectorsSpec; }
// Forward declaration of `HybridCvPoint2fSpec` to properly resolve imports.
namespace margelo::nitro::nitroopencv { class HybridCvPoint2fSpec; }
// Forward declaration of `HybridPoint2fVectorSpec` to properly resolve imports.
namespace margelo::nitro::nitroopencv { class HybridPoint2fVectorSpec; }
// Forward declaration of `HybridCvRectSpec` to properly resolve imports.
namespace margelo::nitro::nitroopencv { class HybridCvRectSpec; }
// Forward declaration of `HybridRectVectorSpec` to properly resolve imports.
namespace margelo::nitro::nitroopencv { class HybridRectVectorSpec; }
// Forward declaration of `HybridCvRotatedRectSpec` to properly resolve imports.
namespace margelo::nitro::nitroopencv { class HybridCvRotatedRectSpec; }
// Forward declaration of `HybridCvSizeSpec` to properly resolve imports.
namespace margelo::nitro::nitroopencv { class HybridCvSizeSpec; }
// Forward declaration of `HybridCvScalarSpec` to properly resolve imports.
namespace margelo::nitro::nitroopencv { class HybridCvScalarSpec; }
// Forward declaration of `ImportBufferItemType` to properly resolve imports.
namespace margelo::nitro::nitroopencv { enum class ImportBufferItemType; }
// Forward declaration of `ArrayBuffer` to properly resolve imports.
namespace NitroModules { class ArrayBuffer; }

#include <memory>
#include "HybridCvMatSpec.hpp"
#include "DataTypes.hpp"
#include <optional>
#include <vector>
#include "HybridMatVectorSpec.hpp"
#include "HybridCvPointSpec.hpp"
#include "HybridPointVectorSpec.hpp"
#include "HybridPointVectorOfVectorsSpec.hpp"
#include "HybridCvPoint2fSpec.hpp"
#include "HybridPoint2fVectorSpec.hpp"
#include "HybridCvRectSpec.hpp"
#include "HybridRectVectorSpec.hpp"
#include "HybridCvRotatedRectSpec.hpp"
#include "HybridCvSizeSpec.hpp"
#include "HybridCvScalarSpec.hpp"
#include "ImportBufferItemType.hpp"
#include <NitroModules/ArrayBuffer.hpp>
#include <string>

namespace margelo::nitro::nitroopencv {

  using namespace margelo::nitro;

  /**
   * An abstract base class for `Objects`
   * Inherit this class to create instances of `HybridObjectsSpec` in C++.
   * You must explicitly call `HybridObject`'s constructor yourself, because it is virtual.
   * @example
   * ```cpp
   * class HybridObjects: public HybridObjectsSpec {
   * public:
   *   HybridObjects(...): HybridObject(TAG) { ... }
   *   // ...
   * };
   * ```
   */
  class HybridObjectsSpec: public virtual HybridObject {
    public:
      // Constructor
      explicit HybridObjectsSpec(): HybridObject(TAG) { }

      // Destructor
      ~HybridObjectsSpec() override = default;

    public:
      // Properties
      

    public:
      // Methods
      virtual std::shared_ptr<margelo::nitro::nitroopencv::HybridCvMatSpec> createMat(double rows, double cols, DataTypes dataType, const std::optional<std::vector<double>>& data) = 0;
      virtual std::shared_ptr<margelo::nitro::nitroopencv::HybridMatVectorSpec> createMatVector() = 0;
      virtual std::shared_ptr<margelo::nitro::nitroopencv::HybridCvPointSpec> createPoint(double x, double y) = 0;
      virtual std::shared_ptr<margelo::nitro::nitroopencv::HybridPointVectorSpec> createPointVector() = 0;
      virtual std::shared_ptr<margelo::nitro::nitroopencv::HybridPointVectorOfVectorsSpec> createPointVectorOfVectors() = 0;
      virtual std::shared_ptr<margelo::nitro::nitroopencv::HybridCvPoint2fSpec> createPoint2f(double x, double y) = 0;
      virtual std::shared_ptr<margelo::nitro::nitroopencv::HybridPoint2fVectorSpec> createPoint2fVector() = 0;
      virtual std::shared_ptr<margelo::nitro::nitroopencv::HybridCvRectSpec> createRect(double x, double y, double width, double height) = 0;
      virtual std::shared_ptr<margelo::nitro::nitroopencv::HybridRectVectorSpec> createRectVector() = 0;
      virtual std::shared_ptr<margelo::nitro::nitroopencv::HybridCvRotatedRectSpec> createRotatedRect(double centerX, double centerY, double width, double height, double angle) = 0;
      virtual std::shared_ptr<margelo::nitro::nitroopencv::HybridCvSizeSpec> createSize(double width, double height) = 0;
      virtual std::shared_ptr<margelo::nitro::nitroopencv::HybridCvScalarSpec> createScalar(std::optional<double> a, std::optional<double> b, std::optional<double> c, std::optional<double> d) = 0;
      virtual std::shared_ptr<margelo::nitro::nitroopencv::HybridCvMatSpec> arrayBufferToMat(ImportBufferItemType itemType, double rows, double cols, double channels, const std::shared_ptr<ArrayBuffer>& input) = 0;
      virtual std::shared_ptr<margelo::nitro::nitroopencv::HybridCvMatSpec> base64ToMat(const std::string& data) = 0;
      virtual std::shared_ptr<ArrayBuffer> matToArrayBuffer(const std::shared_ptr<margelo::nitro::nitroopencv::HybridCvMatSpec>& mat) = 0;

    protected:
      // Hybrid Setup
      void loadHybridMethods() override;

    protected:
      // Tag for logging
      static constexpr auto TAG = "Objects";
  };

} // namespace margelo::nitro::nitroopencv

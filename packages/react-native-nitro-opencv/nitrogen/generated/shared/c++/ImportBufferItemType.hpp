///
/// ImportBufferItemType.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#if __has_include(<NitroModules/NitroHash.hpp>)
#include <NitroModules/NitroHash.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif
#if __has_include(<NitroModules/JSIConverter.hpp>)
#include <NitroModules/JSIConverter.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif
#if __has_include(<NitroModules/NitroDefines.hpp>)
#include <NitroModules/NitroDefines.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif

namespace margelo::nitro::nitroopencv {

  /**
   * An enum which can be represented as a JavaScript union (ImportBufferItemType).
   */
  enum class ImportBufferItemType {
    UINT8      SWIFT_NAME(uint8) = 0,
    UINT16      SWIFT_NAME(uint16) = 1,
    INT8      SWIFT_NAME(int8) = 2,
    INT16      SWIFT_NAME(int16) = 3,
    INT32      SWIFT_NAME(int32) = 4,
    FLOAT32      SWIFT_NAME(float32) = 5,
    FLOAT64      SWIFT_NAME(float64) = 6,
  } CLOSED_ENUM;

} // namespace margelo::nitro::nitroopencv

namespace margelo::nitro {

  using namespace margelo::nitro::nitroopencv;

  // C++ ImportBufferItemType <> JS ImportBufferItemType (union)
  template <>
  struct JSIConverter<ImportBufferItemType> final {
    static inline ImportBufferItemType fromJSI(jsi::Runtime& runtime, const jsi::Value& arg) {
      std::string unionValue = JSIConverter<std::string>::fromJSI(runtime, arg);
      switch (hashString(unionValue.c_str(), unionValue.size())) {
        case hashString("uint8"): return ImportBufferItemType::UINT8;
        case hashString("uint16"): return ImportBufferItemType::UINT16;
        case hashString("int8"): return ImportBufferItemType::INT8;
        case hashString("int16"): return ImportBufferItemType::INT16;
        case hashString("int32"): return ImportBufferItemType::INT32;
        case hashString("float32"): return ImportBufferItemType::FLOAT32;
        case hashString("float64"): return ImportBufferItemType::FLOAT64;
        default: [[unlikely]]
          throw std::invalid_argument("Cannot convert \"" + unionValue + "\" to enum ImportBufferItemType - invalid value!");
      }
    }
    static inline jsi::Value toJSI(jsi::Runtime& runtime, ImportBufferItemType arg) {
      switch (arg) {
        case ImportBufferItemType::UINT8: return JSIConverter<std::string>::toJSI(runtime, "uint8");
        case ImportBufferItemType::UINT16: return JSIConverter<std::string>::toJSI(runtime, "uint16");
        case ImportBufferItemType::INT8: return JSIConverter<std::string>::toJSI(runtime, "int8");
        case ImportBufferItemType::INT16: return JSIConverter<std::string>::toJSI(runtime, "int16");
        case ImportBufferItemType::INT32: return JSIConverter<std::string>::toJSI(runtime, "int32");
        case ImportBufferItemType::FLOAT32: return JSIConverter<std::string>::toJSI(runtime, "float32");
        case ImportBufferItemType::FLOAT64: return JSIConverter<std::string>::toJSI(runtime, "float64");
        default: [[unlikely]]
          throw std::invalid_argument("Cannot convert ImportBufferItemType to JS - invalid value: "
                                    + std::to_string(static_cast<int>(arg)) + "!");
      }
    }
    static inline bool canConvert(jsi::Runtime& runtime, const jsi::Value& value) {
      if (!value.isString()) {
        return false;
      }
      std::string unionValue = JSIConverter<std::string>::fromJSI(runtime, value);
      switch (hashString(unionValue.c_str(), unionValue.size())) {
        case hashString("uint8"):
        case hashString("uint16"):
        case hashString("int8"):
        case hashString("int16"):
        case hashString("int32"):
        case hashString("float32"):
        case hashString("float64"):
          return true;
        default:
          return false;
      }
    }
  };

} // namespace margelo::nitro

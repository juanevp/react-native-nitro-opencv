import type { ColorConversion } from "./specs/functions-color-conversion.nitro";
import type { Core } from "./specs/functions-core.nitro";
import type { Drawing } from "./specs/functions-drawing.nitro";
import type { Feature } from "./specs/functions-feature.nitro";
import type { ImageFiltering } from "./specs/functions-image-filtering.nitro";
import type { ImageTransform } from "./specs/functions-image-transform.nitro";
import type { Misc } from "./specs/functions-misc.nitro";
import type { ObjectDetection } from "./specs/functions-object-detection.nitro";
import type { Shape } from "./specs/functions-shape.nitro";
import type { CvMat } from "./specs/mat.nitro";
import type { Objects } from "./specs/objects.nitro";
import type { CvScalar } from "./specs/scalar.nitro";
export * from "./specs/constants-color-conversions-codes";
export * from "./specs/constants-core";
export * from "./specs/constants-image-processing";
export * from "./specs/data-types";
export * from "./specs/functions-color-conversion.nitro";
export * from "./specs/functions-core.nitro";
export * from "./specs/functions-drawing.nitro";
export * from "./specs/functions-feature.nitro";
export * from "./specs/functions-image-filtering.nitro";
export * from "./specs/functions-image-transform.nitro";
export * from "./specs/functions-misc.nitro";
export * from "./specs/functions-object-detection.nitro";
export * from "./specs/functions-shape.nitro";
export * from "./specs/mat-vector.nitro";
export * from "./specs/mat.nitro";
export * from "./specs/objects.nitro";
export * from "./specs/point-vector.nitro";
export * from "./specs/point.nitro";
export * from "./specs/rect-vector.nitro";
export * from "./specs/rotated-rect.nitro";
export * from "./specs/rect.nitro";
export * from "./specs/scalar.nitro";
export * from "./specs/size.nitro";
export declare const OpenCV: {
    readonly core: Core;
    readonly objects: Omit<Objects, "createScalar"> & {
        createScalar(): CvScalar;
        createScalar(a: number): CvScalar;
        createScalar(a: number, b: number, c: number): CvScalar;
        createScalar(a: number, b: number, c: number, d: number): CvScalar;
    };
    readonly colorConversion: ColorConversion;
    readonly shape: Shape;
    readonly objectDetection: ObjectDetection;
    readonly misc: Misc;
    readonly imageTransform: ImageTransform;
    readonly imageFiltering: ImageFiltering;
    readonly feature: Feature;
    readonly drawing: Drawing;
};
export declare const boxedOpenCV: {
    unbox(): typeof OpenCV;
};
export type BufferType = {
    uint8: Uint8Array;
    uint16: Uint16Array;
    uint32: Uint32Array;
    int8: Int8Array;
    int16: Int16Array;
    int32: Int32Array;
    float32: Float32Array;
    float64: Float64Array;
};
export type ImportBufferType = Omit<BufferType, "uint32">;
type ImportBufferItemType = keyof ImportBufferType;
export declare function bufferToMat(openCV: typeof OpenCV, rows: number, cols: number, channels: 1 | 3 | 4, input: ImportBufferType[ImportBufferItemType]): CvMat;
export declare function matToBuffer<T extends keyof BufferType>(openCV: typeof OpenCV, mat: CvMat, type: T): BufferType[T];

///
/// HybridRectVectorSpec.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#if __has_include(<NitroModules/HybridObject.hpp>)
#include <NitroModules/HybridObject.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif

// Forward declaration of `Rect` to properly resolve imports.
namespace margelo::nitro::nitroopencv { struct Rect; }
// Forward declaration of `HybridCvRectSpec` to properly resolve imports.
namespace margelo::nitro::nitroopencv { class HybridCvRectSpec; }

#include <vector>
#include "Rect.hpp"
#include <memory>
#include "HybridCvRectSpec.hpp"

namespace margelo::nitro::nitroopencv {

  using namespace margelo::nitro;

  /**
   * An abstract base class for `RectVector`
   * Inherit this class to create instances of `HybridRectVectorSpec` in C++.
   * You must explicitly call `HybridObject`'s constructor yourself, because it is virtual.
   * @example
   * ```cpp
   * class HybridRectVector: public HybridRectVectorSpec {
   * public:
   *   HybridRectVector(...): HybridObject(TAG) { ... }
   *   // ...
   * };
   * ```
   */
  class HybridRectVectorSpec: public virtual HybridObject {
    public:
      // Constructor
      explicit HybridRectVectorSpec(): HybridObject(TAG) { }

      // Destructor
      ~HybridRectVectorSpec() override = default;

    public:
      // Properties
      

    public:
      // Methods
      virtual std::vector<Rect> toJsValue() = 0;
      virtual std::shared_ptr<margelo::nitro::nitroopencv::HybridCvRectSpec> copyAt(double index) = 0;

    protected:
      // Hybrid Setup
      void loadHybridMethods() override;

    protected:
      // Tag for logging
      static constexpr auto TAG = "RectVector";
  };

} // namespace margelo::nitro::nitroopencv

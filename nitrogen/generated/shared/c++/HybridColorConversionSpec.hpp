///
/// HybridColorConversionSpec.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#if __has_include(<NitroModules/HybridObject.hpp>)
#include <NitroModules/HybridObject.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif

// Forward declaration of `HybridCvMatSpec` to properly resolve imports.
namespace margelo::nitro::nitroopencv { class HybridCvMatSpec; }
// Forward declaration of `ColorConversionCodes` to properly resolve imports.
namespace margelo::nitro::nitroopencv { enum class ColorConversionCodes; }

#include <memory>
#include "HybridCvMatSpec.hpp"
#include "ColorConversionCodes.hpp"
#include <optional>

namespace margelo::nitro::nitroopencv {

  using namespace margelo::nitro;

  /**
   * An abstract base class for `ColorConversion`
   * Inherit this class to create instances of `HybridColorConversionSpec` in C++.
   * You must explicitly call `HybridObject`'s constructor yourself, because it is virtual.
   * @example
   * ```cpp
   * class HybridColorConversion: public HybridColorConversionSpec {
   * public:
   *   HybridColorConversion(...): HybridObject(TAG) { ... }
   *   // ...
   * };
   * ```
   */
  class HybridColorConversionSpec: public virtual HybridObject {
    public:
      // Constructor
      explicit HybridColorConversionSpec(): HybridObject(TAG) { }

      // Destructor
      ~HybridColorConversionSpec() override = default;

    public:
      // Properties
      

    public:
      // Methods
      virtual void cvtColor(const std::shared_ptr<margelo::nitro::nitroopencv::HybridCvMatSpec>& src, const std::shared_ptr<margelo::nitro::nitroopencv::HybridCvMatSpec>& dst, ColorConversionCodes code, std::optional<double> dstCn) = 0;
      virtual void cvtColorTwoPlane(const std::shared_ptr<margelo::nitro::nitroopencv::HybridCvMatSpec>& src1, const std::shared_ptr<margelo::nitro::nitroopencv::HybridCvMatSpec>& src2, const std::shared_ptr<margelo::nitro::nitroopencv::HybridCvMatSpec>& dst, ColorConversionCodes code) = 0;
      virtual void demosaicing(const std::shared_ptr<margelo::nitro::nitroopencv::HybridCvMatSpec>& src, const std::shared_ptr<margelo::nitro::nitroopencv::HybridCvMatSpec>& dst, ColorConversionCodes code, std::optional<double> dstCn) = 0;

    protected:
      // Hybrid Setup
      void loadHybridMethods() override;

    protected:
      // Tag for logging
      static constexpr auto TAG = "ColorConversion";
  };

} // namespace margelo::nitro::nitroopencv

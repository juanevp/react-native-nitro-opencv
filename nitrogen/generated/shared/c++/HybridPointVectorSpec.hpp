///
/// HybridPointVectorSpec.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#if __has_include(<NitroModules/HybridObject.hpp>)
#include <NitroModules/HybridObject.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif

// Forward declaration of `Point` to properly resolve imports.
namespace margelo::nitro::nitroopencv { struct Point; }
// Forward declaration of `HybridCvPointSpec` to properly resolve imports.
namespace margelo::nitro::nitroopencv { class HybridCvPointSpec; }

#include <vector>
#include "Point.hpp"
#include <memory>
#include "HybridCvPointSpec.hpp"

namespace margelo::nitro::nitroopencv {

  using namespace margelo::nitro;

  /**
   * An abstract base class for `PointVector`
   * Inherit this class to create instances of `HybridPointVectorSpec` in C++.
   * You must explicitly call `HybridObject`'s constructor yourself, because it is virtual.
   * @example
   * ```cpp
   * class HybridPointVector: public HybridPointVectorSpec {
   * public:
   *   HybridPointVector(...): HybridObject(TAG) { ... }
   *   // ...
   * };
   * ```
   */
  class HybridPointVectorSpec: public virtual HybridObject {
    public:
      // Constructor
      explicit HybridPointVectorSpec(): HybridObject(TAG) { }

      // Destructor
      ~HybridPointVectorSpec() override = default;

    public:
      // Properties
      

    public:
      // Methods
      virtual std::vector<Point> toJsValue() = 0;
      virtual std::shared_ptr<margelo::nitro::nitroopencv::HybridCvPointSpec> copyAt(double index) = 0;

    protected:
      // Hybrid Setup
      void loadHybridMethods() override;

    protected:
      // Tag for logging
      static constexpr auto TAG = "PointVector";
  };

} // namespace margelo::nitro::nitroopencv

///
/// MatInfo.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#if __has_include(<NitroModules/JSIConverter.hpp>)
#include <NitroModules/JSIConverter.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif
#if __has_include(<NitroModules/NitroDefines.hpp>)
#include <NitroModules/NitroDefines.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif

// Forward declaration of `Size` to properly resolve imports.
namespace margelo::nitro::nitroopencv { struct Size; }

#include "Size.hpp"

namespace margelo::nitro::nitroopencv {

  /**
   * A struct which can be represented as a JavaScript object (MatInfo).
   */
  struct MatInfo {
  public:
    double cols     SWIFT_PRIVATE;
    double rows     SWIFT_PRIVATE;
    Size size     SWIFT_PRIVATE;

  public:
    MatInfo() = default;
    explicit MatInfo(double cols, double rows, Size size): cols(cols), rows(rows), size(size) {}
  };

} // namespace margelo::nitro::nitroopencv

namespace margelo::nitro {

  using namespace margelo::nitro::nitroopencv;

  // C++ MatInfo <> JS MatInfo (object)
  template <>
  struct JSIConverter<MatInfo> final {
    static inline MatInfo fromJSI(jsi::Runtime& runtime, const jsi::Value& arg) {
      jsi::Object obj = arg.asObject(runtime);
      return MatInfo(
        JSIConverter<double>::fromJSI(runtime, obj.getProperty(runtime, "cols")),
        JSIConverter<double>::fromJSI(runtime, obj.getProperty(runtime, "rows")),
        JSIConverter<Size>::fromJSI(runtime, obj.getProperty(runtime, "size"))
      );
    }
    static inline jsi::Value toJSI(jsi::Runtime& runtime, const MatInfo& arg) {
      jsi::Object obj(runtime);
      obj.setProperty(runtime, "cols", JSIConverter<double>::toJSI(runtime, arg.cols));
      obj.setProperty(runtime, "rows", JSIConverter<double>::toJSI(runtime, arg.rows));
      obj.setProperty(runtime, "size", JSIConverter<Size>::toJSI(runtime, arg.size));
      return obj;
    }
    static inline bool canConvert(jsi::Runtime& runtime, const jsi::Value& value) {
      if (!value.isObject()) {
        return false;
      }
      jsi::Object obj = value.getObject(runtime);
      if (!JSIConverter<double>::canConvert(runtime, obj.getProperty(runtime, "cols"))) return false;
      if (!JSIConverter<double>::canConvert(runtime, obj.getProperty(runtime, "rows"))) return false;
      if (!JSIConverter<Size>::canConvert(runtime, obj.getProperty(runtime, "size"))) return false;
      return true;
    }
  };

} // namespace margelo::nitro

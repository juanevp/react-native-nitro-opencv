///
/// PhaseCorrelationResult.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#if __has_include(<NitroModules/JSIConverter.hpp>)
#include <NitroModules/JSIConverter.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif
#if __has_include(<NitroModules/NitroDefines.hpp>)
#include <NitroModules/NitroDefines.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif

// Forward declaration of `HybridCvPoint2fSpec` to properly resolve imports.
namespace margelo::nitro::nitroopencv { class HybridCvPoint2fSpec; }

#include <memory>
#include "HybridCvPoint2fSpec.hpp"

namespace margelo::nitro::nitroopencv {

  /**
   * A struct which can be represented as a JavaScript object (PhaseCorrelationResult).
   */
  struct PhaseCorrelationResult {
  public:
    std::shared_ptr<margelo::nitro::nitroopencv::HybridCvPoint2fSpec> phaseShift     SWIFT_PRIVATE;
    double response     SWIFT_PRIVATE;

  public:
    PhaseCorrelationResult() = default;
    explicit PhaseCorrelationResult(std::shared_ptr<margelo::nitro::nitroopencv::HybridCvPoint2fSpec> phaseShift, double response): phaseShift(phaseShift), response(response) {}
  };

} // namespace margelo::nitro::nitroopencv

namespace margelo::nitro {

  using namespace margelo::nitro::nitroopencv;

  // C++ PhaseCorrelationResult <> JS PhaseCorrelationResult (object)
  template <>
  struct JSIConverter<PhaseCorrelationResult> final {
    static inline PhaseCorrelationResult fromJSI(jsi::Runtime& runtime, const jsi::Value& arg) {
      jsi::Object obj = arg.asObject(runtime);
      return PhaseCorrelationResult(
        JSIConverter<std::shared_ptr<margelo::nitro::nitroopencv::HybridCvPoint2fSpec>>::fromJSI(runtime, obj.getProperty(runtime, "phaseShift")),
        JSIConverter<double>::fromJSI(runtime, obj.getProperty(runtime, "response"))
      );
    }
    static inline jsi::Value toJSI(jsi::Runtime& runtime, const PhaseCorrelationResult& arg) {
      jsi::Object obj(runtime);
      obj.setProperty(runtime, "phaseShift", JSIConverter<std::shared_ptr<margelo::nitro::nitroopencv::HybridCvPoint2fSpec>>::toJSI(runtime, arg.phaseShift));
      obj.setProperty(runtime, "response", JSIConverter<double>::toJSI(runtime, arg.response));
      return obj;
    }
    static inline bool canConvert(jsi::Runtime& runtime, const jsi::Value& value) {
      if (!value.isObject()) {
        return false;
      }
      jsi::Object obj = value.getObject(runtime);
      if (!JSIConverter<std::shared_ptr<margelo::nitro::nitroopencv::HybridCvPoint2fSpec>>::canConvert(runtime, obj.getProperty(runtime, "phaseShift"))) return false;
      if (!JSIConverter<double>::canConvert(runtime, obj.getProperty(runtime, "response"))) return false;
      return true;
    }
  };

} // namespace margelo::nitro

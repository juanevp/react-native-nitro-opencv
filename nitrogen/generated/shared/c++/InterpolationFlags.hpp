///
/// InterpolationFlags.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#include <cmath>
#if __has_include(<NitroModules/JSIConverter.hpp>)
#include <NitroModules/JSIConverter.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif
#if __has_include(<NitroModules/NitroDefines.hpp>)
#include <NitroModules/NitroDefines.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif

namespace margelo::nitro::nitroopencv {

  /**
   * An enum which can be represented as a JavaScript enum (InterpolationFlags).
   */
  enum class InterpolationFlags {
    INTER_NEAREST      SWIFT_NAME(interNearest) = 0,
    INTER_LINEAR      SWIFT_NAME(interLinear) = 1,
    INTER_CUBIC      SWIFT_NAME(interCubic) = 2,
    INTER_AREA      SWIFT_NAME(interArea) = 3,
    INTER_LANCZOS4      SWIFT_NAME(interLanczos4) = 4,
    INTER_LINEAR_EXACT      SWIFT_NAME(interLinearExact) = 5,
    INTER_NEAREST_EXACT      SWIFT_NAME(interNearestExact) = 6,
    INTER_MAX      SWIFT_NAME(interMax) = 7,
    WARP_FILL_OUTLIERS      SWIFT_NAME(warpFillOutliers) = 8,
    WARP_INVERSE_MAP      SWIFT_NAME(warpInverseMap) = 16,
    WARP_RELATIVE_MAP      SWIFT_NAME(warpRelativeMap) = 32,
  } CLOSED_ENUM;

} // namespace margelo::nitro::nitroopencv

namespace margelo::nitro {

  using namespace margelo::nitro::nitroopencv;

  // C++ InterpolationFlags <> JS InterpolationFlags (enum)
  template <>
  struct JSIConverter<InterpolationFlags> final {
    static inline InterpolationFlags fromJSI(jsi::Runtime& runtime, const jsi::Value& arg) {
      int enumValue = JSIConverter<int>::fromJSI(runtime, arg);
      return static_cast<InterpolationFlags>(enumValue);
    }
    static inline jsi::Value toJSI(jsi::Runtime& runtime, InterpolationFlags arg) {
      int enumValue = static_cast<int>(arg);
      return JSIConverter<int>::toJSI(runtime, enumValue);
    }
    static inline bool canConvert(jsi::Runtime&, const jsi::Value& value) {
      if (!value.isNumber()) {
        return false;
      }
      double integer;
      double fraction = modf(value.getNumber(), &integer);
      if (fraction != 0.0) {
        // It is some kind of floating point number - our enums are ints.
        return false;
      }
      // Check if we are within the bounds of the enum.
      return integer >= 0 && integer <= 10;
    }
  };

} // namespace margelo::nitro

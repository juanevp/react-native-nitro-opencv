///
/// HybridShapeSpec.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#if __has_include(<NitroModules/HybridObject.hpp>)
#include <NitroModules/HybridObject.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif

// Forward declaration of `HybridCvMatSpec` to properly resolve imports.
namespace margelo::nitro::nitroopencv { class HybridCvMatSpec; }
// Forward declaration of `HybridMatVectorSpec` to properly resolve imports.
namespace margelo::nitro::nitroopencv { class HybridMatVectorSpec; }
// Forward declaration of `HybridPointVectorSpec` to properly resolve imports.
namespace margelo::nitro::nitroopencv { class HybridPointVectorSpec; }
// Forward declaration of `HybridCvRectSpec` to properly resolve imports.
namespace margelo::nitro::nitroopencv { class HybridCvRectSpec; }
// Forward declaration of `HybridPointVectorOfVectorsSpec` to properly resolve imports.
namespace margelo::nitro::nitroopencv { class HybridPointVectorOfVectorsSpec; }
// Forward declaration of `RetrievalModes` to properly resolve imports.
namespace margelo::nitro::nitroopencv { enum class RetrievalModes; }
// Forward declaration of `ContourApproximationModes` to properly resolve imports.
namespace margelo::nitro::nitroopencv { enum class ContourApproximationModes; }
// Forward declaration of `DistanceTypes` to properly resolve imports.
namespace margelo::nitro::nitroopencv { enum class DistanceTypes; }
// Forward declaration of `ShapeMatchModes` to properly resolve imports.
namespace margelo::nitro::nitroopencv { enum class ShapeMatchModes; }
// Forward declaration of `HybridCvRotatedRectSpec` to properly resolve imports.
namespace margelo::nitro::nitroopencv { class HybridCvRotatedRectSpec; }

#include <variant>
#include <memory>
#include "HybridCvMatSpec.hpp"
#include "HybridMatVectorSpec.hpp"
#include "HybridPointVectorSpec.hpp"
#include "HybridCvRectSpec.hpp"
#include <optional>
#include "HybridPointVectorOfVectorsSpec.hpp"
#include "RetrievalModes.hpp"
#include "ContourApproximationModes.hpp"
#include "DistanceTypes.hpp"
#include "ShapeMatchModes.hpp"
#include "HybridCvRotatedRectSpec.hpp"

namespace margelo::nitro::nitroopencv {

  using namespace margelo::nitro;

  /**
   * An abstract base class for `Shape`
   * Inherit this class to create instances of `HybridShapeSpec` in C++.
   * You must explicitly call `HybridObject`'s constructor yourself, because it is virtual.
   * @example
   * ```cpp
   * class HybridShape: public HybridShapeSpec {
   * public:
   *   HybridShape(...): HybridObject(TAG) { ... }
   *   // ...
   * };
   * ```
   */
  class HybridShapeSpec: public virtual HybridObject {
    public:
      // Constructor
      explicit HybridShapeSpec(): HybridObject(TAG) { }

      // Destructor
      ~HybridShapeSpec() override = default;

    public:
      // Properties
      

    public:
      // Methods
      virtual void approxPolyDP(const std::variant<std::shared_ptr<margelo::nitro::nitroopencv::HybridCvMatSpec>, std::shared_ptr<margelo::nitro::nitroopencv::HybridMatVectorSpec>, std::shared_ptr<margelo::nitro::nitroopencv::HybridPointVectorSpec>>& curve, const std::variant<std::shared_ptr<margelo::nitro::nitroopencv::HybridCvMatSpec>, std::shared_ptr<margelo::nitro::nitroopencv::HybridPointVectorSpec>>& approxCurve, double epsilon, bool closed) = 0;
      virtual double arcLength(const std::variant<std::shared_ptr<margelo::nitro::nitroopencv::HybridCvMatSpec>, std::shared_ptr<margelo::nitro::nitroopencv::HybridMatVectorSpec>, std::shared_ptr<margelo::nitro::nitroopencv::HybridPointVectorSpec>>& curve, bool closed) = 0;
      virtual std::shared_ptr<margelo::nitro::nitroopencv::HybridCvRectSpec> boundingRect(const std::variant<std::shared_ptr<margelo::nitro::nitroopencv::HybridCvMatSpec>, std::shared_ptr<margelo::nitro::nitroopencv::HybridMatVectorSpec>, std::shared_ptr<margelo::nitro::nitroopencv::HybridPointVectorSpec>>& array) = 0;
      virtual double connectedComponents(const std::shared_ptr<margelo::nitro::nitroopencv::HybridCvMatSpec>& image, const std::shared_ptr<margelo::nitro::nitroopencv::HybridCvMatSpec>& labels) = 0;
      virtual double connectedComponentsWithStats(const std::shared_ptr<margelo::nitro::nitroopencv::HybridCvMatSpec>& image, const std::shared_ptr<margelo::nitro::nitroopencv::HybridCvMatSpec>& labels, const std::shared_ptr<margelo::nitro::nitroopencv::HybridCvMatSpec>& stats, const std::shared_ptr<margelo::nitro::nitroopencv::HybridCvMatSpec>& centroids) = 0;
      virtual double contourArea(const std::variant<std::shared_ptr<margelo::nitro::nitroopencv::HybridCvMatSpec>, std::shared_ptr<margelo::nitro::nitroopencv::HybridMatVectorSpec>, std::shared_ptr<margelo::nitro::nitroopencv::HybridPointVectorSpec>>& contour, std::optional<bool> oriented) = 0;
      virtual void convexHull(const std::shared_ptr<margelo::nitro::nitroopencv::HybridCvMatSpec>& points, const std::shared_ptr<margelo::nitro::nitroopencv::HybridCvMatSpec>& hull) = 0;
      virtual void convexityDefects(const std::shared_ptr<margelo::nitro::nitroopencv::HybridCvMatSpec>& contour, const std::shared_ptr<margelo::nitro::nitroopencv::HybridCvMatSpec>& convexHull, const std::shared_ptr<margelo::nitro::nitroopencv::HybridCvMatSpec>& convexityDefects) = 0;
      virtual void findContours(const std::shared_ptr<margelo::nitro::nitroopencv::HybridCvMatSpec>& image, const std::variant<std::shared_ptr<margelo::nitro::nitroopencv::HybridMatVectorSpec>, std::shared_ptr<margelo::nitro::nitroopencv::HybridPointVectorOfVectorsSpec>>& contours, RetrievalModes mode, ContourApproximationModes method) = 0;
      virtual void fitLine(const std::shared_ptr<margelo::nitro::nitroopencv::HybridCvMatSpec>& points, const std::shared_ptr<margelo::nitro::nitroopencv::HybridCvMatSpec>& line, DistanceTypes disType, double param, double reps, double aeps) = 0;
      virtual bool isContourConvex(const std::shared_ptr<margelo::nitro::nitroopencv::HybridCvMatSpec>& contour) = 0;
      virtual double matchShapes(const std::shared_ptr<margelo::nitro::nitroopencv::HybridCvMatSpec>& contour1, const std::shared_ptr<margelo::nitro::nitroopencv::HybridCvMatSpec>& contour2, ShapeMatchModes method, double parameter) = 0;
      virtual std::shared_ptr<margelo::nitro::nitroopencv::HybridCvRotatedRectSpec> minAreaRect(const std::shared_ptr<margelo::nitro::nitroopencv::HybridCvMatSpec>& points) = 0;

    protected:
      // Hybrid Setup
      void loadHybridMethods() override;

    protected:
      // Tag for logging
      static constexpr auto TAG = "Shape";
  };

} // namespace margelo::nitro::nitroopencv

///
/// Scalar.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#if __has_include(<NitroModules/JSIConverter.hpp>)
#include <NitroModules/JSIConverter.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif
#if __has_include(<NitroModules/NitroDefines.hpp>)
#include <NitroModules/NitroDefines.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif





namespace margelo::nitro::nitroopencv {

  /**
   * A struct which can be represented as a JavaScript object (Scalar).
   */
  struct Scalar {
  public:
    double a     SWIFT_PRIVATE;
    double b     SWIFT_PRIVATE;
    double c     SWIFT_PRIVATE;
    double d     SWIFT_PRIVATE;

  public:
    Scalar() = default;
    explicit Scalar(double a, double b, double c, double d): a(a), b(b), c(c), d(d) {}
  };

} // namespace margelo::nitro::nitroopencv

namespace margelo::nitro {

  using namespace margelo::nitro::nitroopencv;

  // C++ Scalar <> JS Scalar (object)
  template <>
  struct JSIConverter<Scalar> final {
    static inline Scalar fromJSI(jsi::Runtime& runtime, const jsi::Value& arg) {
      jsi::Object obj = arg.asObject(runtime);
      return Scalar(
        JSIConverter<double>::fromJSI(runtime, obj.getProperty(runtime, "a")),
        JSIConverter<double>::fromJSI(runtime, obj.getProperty(runtime, "b")),
        JSIConverter<double>::fromJSI(runtime, obj.getProperty(runtime, "c")),
        JSIConverter<double>::fromJSI(runtime, obj.getProperty(runtime, "d"))
      );
    }
    static inline jsi::Value toJSI(jsi::Runtime& runtime, const Scalar& arg) {
      jsi::Object obj(runtime);
      obj.setProperty(runtime, "a", JSIConverter<double>::toJSI(runtime, arg.a));
      obj.setProperty(runtime, "b", JSIConverter<double>::toJSI(runtime, arg.b));
      obj.setProperty(runtime, "c", JSIConverter<double>::toJSI(runtime, arg.c));
      obj.setProperty(runtime, "d", JSIConverter<double>::toJSI(runtime, arg.d));
      return obj;
    }
    static inline bool canConvert(jsi::Runtime& runtime, const jsi::Value& value) {
      if (!value.isObject()) {
        return false;
      }
      jsi::Object obj = value.getObject(runtime);
      if (!JSIConverter<double>::canConvert(runtime, obj.getProperty(runtime, "a"))) return false;
      if (!JSIConverter<double>::canConvert(runtime, obj.getProperty(runtime, "b"))) return false;
      if (!JSIConverter<double>::canConvert(runtime, obj.getProperty(runtime, "c"))) return false;
      if (!JSIConverter<double>::canConvert(runtime, obj.getProperty(runtime, "d"))) return false;
      return true;
    }
  };

} // namespace margelo::nitro
